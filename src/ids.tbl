// ****************************************************************************
//  ids.tbl                                                      DB48X project
// ****************************************************************************
//
//   File Description:
//
//     List of all IDs for RPL opcodes
//
//      ID(i)      defines an ID that is not parseable as a command, e.g. types
//      CMD(i)     defines an ID that is parseable as a command, e.g. "drop"
//      OP(i,n)    defines an operator ID, e.g. "+"
//      NAMED(i,l) defines an ID with an alternate long spelling, e.g. dup
//
//
//
//
// ****************************************************************************
//   (C) 2022 Christophe de Dinechin <christophe@dinechin.org>
//   This software is licensed under the terms outlined in LICENSE.txt
// ****************************************************************************
//   This file is part of DB48X.
//
//   DB48X is free software: you can redistribute it and/or modify
//   it under the terms outlined in the LICENSE.txt file
//
//   DB48X is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// ****************************************************************************

// Commands, e.g. "swap"
#ifndef CMD
#define CMD(id)                 ID(id)
#endif

// Commands with a long name, e.g. "neg" can be called "Negate"
#ifndef NAMED
#define NAMED(id, longname)     CMD(id)
#endif

// Operators, e.g. "+"
#ifndef OP
#define OP(i, n)                NAMED(i, n)
#endif

// Aliases for commands with multiple spelling
#ifndef ALIAS
#define ALIAS(op, name)
#endif

#ifndef OPCODE
#define OPCODE(id)              ID(id)
#endif

#ifndef MENU
#define MENU(id)                ID(id)
#endif

ID(object)                      // Value 0 is reserved for "not implemented"

ID(directory)
ID(text)
ID(list)
ID(program)
ID(block)
ID(array)
ID(menu)

#define FIRST_INTEGER_TYPE      ID_hex_integer
ID(hex_integer)
ID(oct_integer)
ID(bin_integer)
ID(dec_integer)

#define FIRST_REAL_TYPE         ID_integer
#define FIRST_SYMBOLIC_TYPE     ID_integer
ID(integer)
ID(neg_integer)
#define LAST_INTEGER_TYPE       ID_neg_integer

#define FIRST_DECIMAL_TYPE      ID_decimal32
ID(decimal32)
ID(decimal64)
ID(decimal128)
#define LAST_DECIMAL_TYPE       ID_decimal128
#define LAST_REAL_TYPE          ID_decimal128

ID(symbol)
ID(equation)
#define LAST_SYMBOLIC_TYPE      ID_equation

#define FIRST_COMMAND           ID_Drop
CMD(Drop)
CMD(Drop2)
CMD(DropN)
NAMED(Dup,  "Duplicate")
NAMED(Dup2, "Duplicate2")
NAMED(DupN, "DuplicateN")
CMD(Swap)
CMD(Over)
CMD(Pick)
CMD(Rot)
CMD(Roll)
NAMED(RollD, "RollDown")
NAMED(Eval, "Evaluate")
NAMED(Sto, "Store")
NAMED(Rcl, "Recall")

CMD(True)
CMD(False)

#define FIRST_ALGEBRAIC         ID_add
OP(add, "+")
OP(sub, "-")
OP(mul, "×")
OP(div, "÷")
ALIAS(mul, "*")
ALIAS(div, "/")
CMD(mod)
CMD(rem)

NAMED(neg, "Negate")
NAMED(inv, "Invert")
NAMED(sq,  "x²")
NAMED(cubed, "x³")

NAMED(sqrt, "√")

NAMED(abs, "|x|")
ALIAS(abs, "norm")

OP(And,         "and")
OP(Or,          "or")
OP(Xor,         "xor")
OP(NAnd,        "nand")
OP(NOr,         "nor")
OP(Implies,     "implies")
OP(Equiv,       "equiv")
OP(Excludes,    "excludes")
OP(Not,         "not")
NAMED(TestSame, "==")           // Must be before =
NAMED(TestLT,   "<")
NAMED(TestEQ,   "=")
NAMED(TestGT,   ">")
NAMED(TestLE,   "≤")
NAMED(TestNE,   "≠")
NAMED(TestGE,   "≥")

CMD(sin)
CMD(cos)
CMD(tan)
NAMED(asin, "sin⁻¹")
NAMED(acos,  "cos⁻¹")
NAMED(atan,  "tan⁻¹")

CMD(sinh)
CMD(cosh)
CMD(tanh)
NAMED(asinh, "sinh⁻¹")
NAMED(acosh, "cosh⁻¹")
NAMED(atanh, "tanh⁻¹")

CMD(log1p)
ALIAS(log1p, "lnp1")            // HP48 compatibility
CMD(expm1)
ALIAS(expm1, "expm")            // HP48 compatibility
CMD(log)
CMD(log10)
CMD(log2)
CMD(exp)
CMD(exp10)
CMD(exp2)
CMD(erf)
CMD(erfc)
NAMED(tgamma, "Gamma")
CMD(lgamma)
#define LAST_ALGEBRAIC          ID_lgamma

NAMED(cbrt, "∛")
OP(pow, "^")
NAMED(hypot, "Hypothenuse")

CMD(Purge)
CMD(PurgeAll)
NAMED(Mem, "AvailableMemory")
CMD(FreeMemory)
CMD(SystemMemory)
CMD(GarbageCollect)

CMD(Ticks)
CMD(Depth)

// ============================================================================
//
//    Loops
//
// ============================================================================

CMD(DoUntil)
CMD(WhileRepeat)
CMD(StartNext)
CMD(StartStep)
CMD(ForNext)
CMD(ForStep)



// ============================================================================
//
//   Menus
//
// ============================================================================

#define FIRST_IMMEDIATE          ID_MainMenu

MENU(MainMenu)

MENU(MathMenu)
MENU(RealMenu)
MENU(PartsMenu)
MENU(FractionsMenu)
MENU(PowersMenu)
MENU(ComplexMenu)
MENU(VectorMenu)
MENU(MatrixMenu)
MENU(AnglesMenu)
MENU(HyperbolicMenu)
MENU(CircularMenu)
MENU(BasesMenu)
MENU(ProbabilitiesMenu)
MENU(StatisticsMenu)
MENU(SignalProcessingMenu)
MENU(ConstantsMenu)
MENU(EquationsMenu)
MENU(UnitsMenu)
MENU(UnitsConversionsMenu)
MENU(SymbolicMenu)
MENU(SolverMenu)
MENU(NumericalSolverMenu)
MENU(DifferentialSolverMenu)
MENU(SymbolicSolverMenu)
MENU(PolynomialSolverMenu)
MENU(LinearSolverMenu)
MENU(MultiSolverMenu)
MENU(FinanceSolverMenu)

MENU(ProgramMenu)
MENU(TestsMenu)
MENU(CompareMenu)
MENU(LoopsMenu)
MENU(ListMenu)
MENU(StackMenu)
MENU(ObjectMenu)
MENU(FlagsMenu)
MENU(LastThingsMenu)
MENU(CharsMenu)
MENU(ModesMenu)
MENU(IOMenu)
MENU(TimeMenu)
MENU(PlotMenu)



// ============================================================================
//
//   Special menus and menu commands
//
// ============================================================================

CMD(VariablesMenu)
CMD(Catalog)

CMD(Unimplemented)
#define LAST_COMMAND            ID_Unimplemented


// ============================================================================
//
//   Commands that we don't want to see appear in the catalog
//
// ============================================================================

CMD(MenuNextPage)
CMD(MenuPreviousPage)
CMD(MenuFirstPage)

CMD(VariablesMenuExecute)
CMD(VariablesMenuRecall)
CMD(VariablesMenuStore)
CMD(SelfInsert)


// ============================================================================
//
//   Special objects
//
// ============================================================================

ID(font)
ID(dense_font)
ID(sparse_font)
ID(dmcp_font)


// ============================================================================
//
//    Internal IDs used as opcode for the handler
//
// ============================================================================

OPCODE(EVAL)                    // Evaluation, no program execution
OPCODE(EXEC)                    // Evaluation, program execution
OPCODE(SIZE)                    // Size in byte for object
OPCODE(PARSE)                   // Parse this object class
OPCODE(RENDER)                  // Render object as text in a buffer
OPCODE(INSERT)                  // Insert in editor
OPCODE(HELP)                    // Help topic for this object
OPCODE(MENU)                    // Insert menu entries (menu objects only)
OPCODE(MENU_MARKER)             // Menu marker for object (e.g. directory)

#undef ID
#undef OP
#undef CMD
#undef MENU
#undef NAMED
#undef ALIAS
#undef OPCODE
